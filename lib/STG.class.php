<?php 

class Shortcode_guten {

	function __construct( $namespace , $cat , $title , $json , $icon) {
		//$this->base = $base;
		//todo sanitize names 
		$this->json = html_entity_decode($json);
		$this->namespace = $namespace;
		$this->category = $cat;
		$this->title = $title;
		$this->icon = $icon;
	}

	function get_save() {
		$ret = "save: function() {
	        return null;
	    },";

	    return $ret;
	}

	function get_head() {
		ob_start();
		?>
		<!-- code generated by guten block builder -->
		<script>
		
		jQuery(document).ready(function() {


			var el = wp.element.createElement;
			var registerBlockType = wp.blocks.registerBlockType;

			registerBlockType( '<?php echo $this->namespace; ?>', {
			    title: '<?php echo $this->title; ?>',

			    icon: '<?php echo $this->get_icon(); ?>',

			    category: '<?php echo $this->category; ?>',
				
				attributes:  <?php echo $this->get_attr(); ?> ,

		<?php 
		return ob_get_clean();
	}

	function get_icon() {

		if(strpos($this->icon, "dashicons-") !== false) {
			$icon = str_replace("dashicons-", "", $this->icon);
		}

		if($icon) {
			return sanitize_title($icon);
		}
		else {
			return "welcome-write-blog";
		}


	}

	function get_attr() {
		$json_str = $this->json;
		$json = json_decode($json_str);
		$ret = array();
		
		if(!is_array($json)) $json = array();  //if no value of json, then make it empty error

		foreach($json as $j) {
			$name = $this->clean($j->name);
			
			$type= "string";
			if($this->isMultiple($j)) {
				$type = "array";
			}
			else if ($this->isFile($j)) {
				$type = "object";
			}
			$ret[$name] = array(
						"type" => $type 
					);

		}

		return json_encode($ret);
	}

	function isFile($field) {
		return $field->type == "file";
	}

	function get_edit() {

		$ret = "
				edit: function(props) {
		";

		if($this->json) {


			//code to read values for all fields from props
			$ret .= $this->_get_edit_read_fields_values();		

			$ret .= $this->_get_edit_onchange_fn();
			
			$el_generated_by_very_complex = $this->_get_edit_elements();

			$ret .= "
					if(!props.isSelected) {
						
						return(
							el(wp.components.ServerSideRender,{
					                block: '{$this->namespace}',
					                //attributes:  props.attributes
					                ".$this->attributes_for_server()."
								}
							)
						)
	
					}
					else {
						$el_generated_by_very_complex
					}
					";


		}


		$ret .= "}, "; //closing edit() fn

		return $ret;

	}

	function attributes_for_server() {
		$ret = "";
		$json_str = $this->json;
		$fields = json_decode($json_str);
		foreach($fields as $field) {
			$ret .= $field->name.": props.".$field->name.",";
		}
		return $ret;
	}

	function _get_edit_read_fields_values() {
		$ret = "";
		$json_str = $this->json;
		$fields = json_decode($json_str);
		$ret .= "\n console.log(props) \n";
		foreach($fields as $field) {
			$field->name = $this->clean($field->name);

			if($this->isMultiple($field)) {
				$ret .= "let {$field->name} = props.attributes.{$field->name} || []; \n ";
			}
			else if($this->isFile($field)) {
				$ret .= "let {$field->name} = props.attributes.{$field->name} || {}; \n ";				
			}
			else {
				$ret .= "let {$field->name} = props.attributes.{$field->name}; \n ";
			}
			
			//$ret .= " //console.log('{$field->name}' , $field->name); \n  ";
		}

		return $ret; 

	}

	function clean($string) {
	   $string = str_replace(' ', '_', $string); // Replaces all spaces with underscore.
	   $string = str_replace('-', '_', $string); // Replaces all hyphens with underscore.

	   return preg_replace('/[^A-Za-z0-9\-]/', '', $string); // Removes special chars.
	}

	function _get_edit_onchange_fn($multiple=false) {
		$ret = "";
		$json_str = $this->json;
		$fields = json_decode($json_str);

		foreach($fields as $field) {
			$function_name = $this->get_onchange_fn_name($field);
			$clean_name = $this->clean($field->name);
			
			if($this->isMultiple($field)) {

				$ret .= "

				function {$function_name}(isChecked, value) {
					
					console.log(isChecked, value)		
					if(isChecked) {
						if(! {$clean_name}.includes(value)) {
							{$clean_name} = {$clean_name}.concat([value])
						}
					}
					else {
						//let index = {$clean_name}.indexOf(value);
						//{$clean_name}.splice(index,1);
						{$clean_name} = {$clean_name}.filter(function(_value , index) {
											return value != _value;
										})
					}

					props.setAttributes({{$clean_name}: {$clean_name}})
					console.log(props.attributes.{$clean_name});

				}

				";
			}
			else if($this->isFile($field)) {
				$ret .= "
					function {$function_name}(val) {
						

						props.setAttributes({{$clean_name}: val})


					}
				";
			}
			else {

				$ret .= "

				function {$function_name}(element) {

					props.setAttributes({ {$clean_name}: element.target.value})

				}

				";
			}

			if($this->isMultiple($field)) {
				$ret .= $this->_values($field);
			}
		
		}


		return $ret; 
	}

	function checkbox($field) {
		
		$clean_name = $this->clean($field->name);
		$ret = ", el( 'b' , {class: 'stg_sub_heading'} , '$field->label' ";

		if(isset($field->values) && is_array($field->values)) {

			foreach($field->values as $value) {

				$value->label = addslashes($value->label);
				$value->value = addslashes($value->value);
				$ret .= ",el(wp.components.CheckboxControl , { label: '{$value->label}' , value: '{$value->value}', checked: {$clean_name}.includes('{$value->value}') , onChange: (checked) => {$clean_name}ChangeFn(checked , '{$value->value}')  }) \n";


			}
		}
		$ret .= ") ";//b
		return $ret;

	}



	function _values($field) {
		$clean_name = $this->clean($field->name);
		$values_json = json_encode($field->values);
		$ret = "
			if(!props.attributes.{$clean_name}) {
				props.attributes.{$clean_name}  = [];
			}
			
			let {$clean_name}_values = $values_json;
		";


		return $ret;

	}	

	function isMultiple($field) {
		if($field->type == "checkbox-group") {
			return true;
		}
		return false;
	}

	function get_onchange_fn_name($field) {
		return $this->clean($field->name)."ChangeFn";
	}

	function _get_edit_elements() {


		$ret = '

			return el(
			  "div",
			  {class: "GTS_main_div" },
			  el("p" , {class: "stg_heading"} , "'.$this->title.'" , 
			  	el("span", {class: "stg_toggle_icon"} , "-") 
			  ),
			  el("div" , {class: "stg_form_div" , }  
			';

		$json_str = $this->json;
		$fields = json_decode($json_str);
		
		foreach($fields as $field) {

			$function_name = $this->get_onchange_fn_name($field);
			$field->name = $this->clean($field->name);			
			$field->label = $this->sanitize($field->label);			
			
			$ret .= ", el('div' , {class: 'stg_single_row'} ";			
			if($field->type == "text") {

				$ret .= ',el( "b" , {class: "stg_sub_heading"} , "'.$field->label.'" , 
							el("input", { type: "'.$field->subtype.'", value: '.$field->name.', onChange: '.$function_name.', class: "'.$field->className.'"})
							)
							';
				
			}
			else if($field->type == "textarea") {
				$ret .= ', el( "b" , {class: "stg_sub_heading"} , "'.$field->label.'" ,
					el("textarea", {  onChange: '.$function_name.' } , '.$field->name.'),
					)
					';

			}

			else if($field->type == "select") {
				$options = $this->_get_select_options($field);
				$value = $this->_get_value_of_select($field);

				$ret .= ', el( "b" , {class: "stg_sub_heading"} , "'.$field->label.'" ,
							el("select", {  value: '.$field->name.' ,onChange: '.$function_name.' , }  '.$options.') 
							)
							';

			}
			else if($field->type == "radio-group" ) {
				$ret .= $this->radio($field);
			}
			else if( $field->type=="checkbox-group" ) {

				$ret .= $this->checkbox($field);

			}
			else if( $field->type == "file" ) {

				//echo "yahaaa ayaa"; exit;
				$ret .= ", el( 'b' , {class: 'stg_sub_heading'} , '$field->label' ,
								el(wp.editor.MediaUpload, 
								  
								 	{
										onSelect: ( media ) => {$function_name}( media ),
										render: ( { open } ) =>  el('div' , {class: 'gts_media'} , 
																		el(wp.components.Button, {onClick: open} , 'Select File'),
																		el('img', {width: '100' , class: 'gst_media_img '+ (!{$field->name}.id)?'gts_hide_img':'' , style: {width: 50, height: 50, } , src: {$field->name}.url  } )
																	),
										multiple: false,
										value: {$field->name}.id				

									},
									
							  	)
							 ) 	
							  	";

			} 

			$ret .= ")";  //stg_single_row
			
		}
		
		//rtrim($ret , ",");

		$ret .="\n";

		$ret .= ") \n ) //return \n";

		return $ret;
	}

	function sanitize($str) {
		return $str; //todo sanitize this
	}

	function radio($field) {

		$fn = $this->get_onchange_fn_name($field);

		$ret = ", el( 'b' , {class: 'stg_sub_heading'} , '$field->label' ";

		foreach($field->values as $value) {
			

			$field->name = $this->clean($field->name);
			
			$checked = "('{$value->value}' == {$field->name} )";


			$ret .= " 
					\n
					,el( 'label' 
							, {class: 'stg_block_el'}
							, el('input', 
									{ type: 'radio', 
									value: '{$value->value}' , 
									name: '$field->name', 
									onChange: $fn, 
									checked:  $checked } )
							
							, el('span', null ,  '{$value->label}') 
						)
							\n ";
		}

		$ret .= ")"; //b
		return $ret;
	}



	function _get_select_options($field) {
		$ret = "";
		foreach($field->values as $value) {

			$ret .= " , el('option' , {value: '{$value->value}' } , '{$value->label}' ) ";
		}
		return rtrim($ret, ",");

	}

	function _get_value_of_select($field) {
		$val = "";
		foreach($field->values as $value) {
			if(isset($value->selected)) {
				$val = $value->value;
			}
		}
		return $val;
	}

	function get_footer() {
		$ret = $this->get_save();
		$ret .= "
		}); //closing registerBlockType
		}); //document ready
		</script>";
		return $ret;
	}

}